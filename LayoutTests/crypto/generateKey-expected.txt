Tests cypto.subtle.generateKey.

On success, you will see a series of "PASS" messages, followed by "TEST COMPLETE".


PASS crypto.subtle.generateKey(aesCbc, extractable, -1) threw exception TypeError: Type error.
PASS crypto.subtle.generateKey(aesCbc, extractable, null) threw exception TypeError: Type error.
PASS crypto.subtle.generateKey(aesCbc, extractable, ['boo']) threw exception TypeError: Type error.
PASS crypto.subtle.generateKey({ name: 'aes-cbc' }, extractable, keyUsages) threw exception NotSupportedError: The implementation did not support the requested type of object or operation..
PASS crypto.subtle.generateKey({ name: 'aes-cbc', length: 70000 }, extractable, keyUsages) threw exception NotSupportedError: The implementation did not support the requested type of object or operation..
PASS crypto.subtle.generateKey({ name: 'aes-cbc', length: -3 }, extractable, keyUsages) threw exception NotSupportedError: The implementation did not support the requested type of object or operation..
FAIL crypto.subtle.generateKey({ name: 'aes-cbc', length: -Infinity }, extractable, keyUsages) should throw an exception. Was [object Promise].
PASS crypto.subtle.generateKey({name: 'hmac', hash: {name: 'sha-256'}, length: -3}, extractable , keyUsages) threw exception NotSupportedError: The implementation did not support the requested type of object or operation..
PASS crypto.subtle.generateKey({name: 'hmac', hash: {name: ''}, length: 48}, extractable , keyUsages) threw exception NotSupportedError: The implementation did not support the requested type of object or operation..
FAIL crypto.subtle.generateKey({name: 'hmac', hash: {name: 'sha-256'}, length: 5000000000}, extractable , keyUsages) should throw an exception. Was [object Promise].
FAIL crypto.subtle.generateKey({name: 'hmac', hash: {name: 'sha-256'}, length: NaN}, extractable , keyUsages) should throw an exception. Was [object Promise].
FAIL crypto.subtle.generateKey({name: 'hmac', hash: {name: 'sha-256'}, length: -NaN}, extractable , keyUsages) should throw an exception. Was [object Promise].
FAIL crypto.subtle.generateKey({name: 'hmac', hash: {name: 'sha-256'}, length: Infinity}, extractable , keyUsages) should throw an exception. Was [object Promise].
FAIL crypto.subtle.generateKey({name: 'hmac', hash: {name: 'sha-256'}, length: -Infinity}, extractable , keyUsages) should throw an exception. Was [object Promise].
PASS crypto.subtle.generateKey({name: 'RSASSA-PKCS1-v1_5', modulusLength: -30}, extractable , keyUsages) threw exception NotSupportedError: The implementation did not support the requested type of object or operation..
PASS crypto.subtle.generateKey({name: 'RSASSA-PKCS1-v1_5', modulusLength: NaN}, extractable , keyUsages) threw exception NotSupportedError: The implementation did not support the requested type of object or operation..
PASS crypto.subtle.generateKey({name: 'RSASSA-PKCS1-v1_5'}, extractable , keyUsages) threw exception NotSupportedError: The implementation did not support the requested type of object or operation..
PASS crypto.subtle.generateKey({name: 'RSASSA-PKCS1-v1_5', modulusLength: 10}, extractable , keyUsages) threw exception NotSupportedError: The implementation did not support the requested type of object or operation..
PASS crypto.subtle.generateKey({name: 'RSASSA-PKCS1-v1_5', modulusLength: 10, publicExponent: 10}, extractable , keyUsages) threw exception NotSupportedError: The implementation did not support the requested type of object or operation..
PASS crypto.subtle.generateKey({name: 'RSASSA-PKCS1-v1_5', modulusLength: 10, publicExponent: null}, extractable , keyUsages) threw exception NotSupportedError: The implementation did not support the requested type of object or operation..
PASS key.type is 'private'
PASS key.extractable is true
PASS key.algorithm.name is 'AES-CBC'
PASS key.algorithm.length is 1024
PASS key.usages.join(',') is 'encrypt,decrypt'
PASS key.type is 'private'
PASS key.extractable is false
PASS key.algorithm.name is 'HMAC'
PASS key.algorithm.hash.name is 'SHA-256'
PASS key.algorithm.length is null
PASS key.usages.join(',') is 'sign'
PASS key.type is 'private'
PASS key.extractable is false
PASS key.algorithm.name is 'HMAC'
PASS key.algorithm.hash.name is 'SHA-256'
PASS key.algorithm.length is 48
PASS key.usages.join(',') is 'sign'
PASS successfullyParsed is true

TEST COMPLETE

