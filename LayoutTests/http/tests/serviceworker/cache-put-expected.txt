This is a testharness.js-based test.
PASS Service Worker: Cache.put 
PASS Cache.put called with simple Request and Response 
PASS Cache.put called with Request and Response from fetch() 
FAIL Cache.put with Request containing a body assert_false: Cache.put should not consume Request body. expected false got true
FAIL Cache.put with a Response containing an empty URL assert_equals: Cache.put should update the cache with new Request and Response. :[object].url expected "" but got "https://example.com/foo"
FAIL Cache.put with an empty response body assert_equals: Cache.put should update the cache with new request and response. :[object].url expected "" but got "https://example.com/foo"
PASS Cache.put with HTTP 500 response 
FAIL Cache.put called twice with same Request and different Responses Entry already exists.
FAIL Cache.put with an invalid request assert_promise_rejects: Cache.put should only accept a Request object as the request. Promise did not reject.
PASS Cache.put with an invalid response 
FAIL Cache.put with a non-HTTP/HTTPS request assert_promise_rejects: Cache.put should reject non-HTTP/HTTPS requests with a TypeError. Promise did not reject.
FAIL Cache.put with a relative URL assert_equals: Cache.put should accept a relative URL as the request. :[object].url expected "" but got "http://127.0.0.1:8000/serviceworker/resources/relative-url"
FAIL Cache.put with a non-GET request assert_promise_rejects: Cache.put should throw a TypeError for non-GET requests. Promise did not reject.
FAIL Cache.put with a non-GET request assert_promise_rejects: Cache.put should throw a TypeError for non-GET requests. Promise did not reject.
PASS Cache.put with an empty response 
Harness: the test ran to completion.

