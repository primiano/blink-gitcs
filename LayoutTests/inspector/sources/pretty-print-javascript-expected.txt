Verifies JavaScript pretty-printing functionality.


Running: blockFormatting
====== 8< ------
{
    print(1);
    print(2);
}

------ >8 ======
Correct mapping for <(1)>
Correct mapping for <(2)>

Running: assignmentFormatting
====== 8< ------
var exp = 'a string';

------ >8 ======
Correct mapping for <string>

Running: objectLiteralFormatting
====== 8< ------
var obj = {'foo': 1,bar: "2",cat: {dog: '1989'}}

------ >8 ======
Correct mapping for <dog>
Correct mapping for <1989>
Correct mapping for <foo>

Running: arrayLiteralFormatting
====== 8< ------
var arr = [3, 2, 1, 0]

------ >8 ======
Correct mapping for <3>
Correct mapping for <2>
Correct mapping for <1>
Correct mapping for <0>

Running: ifFormatting
====== 8< ------
if (a > b && b > c) {
    print(a);
    print(b);
}

------ >8 ======
Correct mapping for <&&>
Correct mapping for <print(a)>

Running: ternarOperatorFormatting
====== 8< ------
a > b ? a : b

------ >8 ======
Correct mapping for <?>
Correct mapping for <:>

Running: whileFormatting
====== 8< ------
while (true) {
    print('infinity');
}

------ >8 ======
Correct mapping for <while>
Correct mapping for <infinity>
Correct mapping for <);>

Running: doWhileFormatting
====== 8< ------
do {
    print('infinity');
} while (true);

------ >8 ======
Correct mapping for <while>
Correct mapping for <infinity>

Running: functionFormatting
====== 8< ------
function test(a, b, c) {
    a *= b;
    return c + a;
}

------ >8 ======
Correct mapping for <return>
Correct mapping for <*=>

Running: forInFormatting
====== 8< ------
for (var key in myMap)
    print(key);

------ >8 ======
Correct mapping for <myMap>
Correct mapping for <print>

Running: forOfFormatting
====== 8< ------
for (var value of myMap)
    print(value);

------ >8 ======
Correct mapping for <myMap>
Correct mapping for <print>

Running: commaBetweenStatementsFormatting
====== 8< ------
rebuild(), show(), hasNew ? refresh() : noop();

------ >8 ======
Correct mapping for <noop>
Correct mapping for <hasNew>

Running: complexScriptFormatting
====== 8< ------
function formatted1() 
{
    var variable1 = 0;
}

function withComments() 
{
    // comment
    return "functionWithComments";
}

try {
    onmessage = function(event) {
        var source = event.data;
        var formattedSource = beautify(source);
        var mapping = buildMapping(source, formattedSource);
        postMessage({formattedSource: formattedSource,mapping: mapping})
    };
    function beautify(source) {
        var ast = parse.parse(source);
        var beautifyOptions = 
        {indent_level: 4,indent_start: 0,quote_keys: false,space_colon: false};
        return process.gen_code(ast, beautifyOptions)
    }
    function buildMapping(source, formattedSource) {
        var mapping = {original: [],formatted: []};
        var lastPosition = 0;
        var regexp = /(^|[^\\])\b((?=\D)[\$\.\w]+)\b/g;
        while (true) 
        {
            var match = regexp.exec(formattedSource);
            if (!match)
                break;
            var position = source.indexOf(match[2], lastPosition);
            if (position === -1)
                throw "No match found in original source for " + match[2];
            mapping.original.push(position);
            mapping.formatted.push(match.index + match[1].length);
            lastPosition = position + match[2].length
        }
        return mapping
    }
    function require() {
        return parse
    }
    var exports = {};
    importScripts("UglifyJS/parse-js.js");
    var parse = exports;
    var exports = {};
    importScripts("UglifyJS/process.js");
    var process = exports;
} catch (e) {
}

function formatted2() 
{
    var variable2 = 0;
}

------ >8 ======
Correct mapping for <function>
Correct mapping for <formatted1>
Correct mapping for <variable1>
Correct mapping for <    return "functionWithComments">
Correct mapping for <onmessage>
Correct mapping for <indent_start>
Correct mapping for <function require>
Correct mapping for <var regexp>
Correct mapping for <importScripts>
Correct mapping for <formatted2>

Running: inlinedScriptFormatting
====== 8< ------
<html><body><script>
function f() {
}
</script><script>
function g() {
    var a;
    window.return = 10;
    if (a)
        return;
}
</script></body></html>
------ >8 ======

