# Copyright 2014 The Chromium Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

gypi_values = exec_script(
    "//build/gypi_to_gn.py",
    [ rebase_path("devtools.gypi") ],
    "scope",
    [ "devtools.gypi" ])

# Some of the files in the .gypi use GYP variable expansions, go through and
# fix them.
devtools_core_base_files = gypi_values.devtools_core_base_files - [
  "<@(devtools_standalone_files)",
] + gypi_values.devtools_standalone_files

devtools_core_files =
  devtools_core_base_files +
  gypi_values.devtools_bindings_js_files +
  gypi_values.devtools_common_js_files +
  gypi_values.devtools_components_js_files +
  gypi_values.devtools_host_js_files +
  gypi_values.devtools_main_js_files +
  gypi_values.devtools_sdk_js_files +
  gypi_values.devtools_screencast_js_files +
  gypi_values.devtools_toolbox_js_files +
  gypi_values.devtools_toolbox_bootstrap_js_files +
  gypi_values.devtools_ui_js_files +
  gypi_values.devtools_workspace_js_files

devtools_extensions_js_files = gypi_values.devtools_extensions_js_files -
  [ "<@(devtools_extension_api_files)" ] +
  gypi_values.devtools_extension_api_files

#-------------------------------------------------------------------------------

visibility = [ "//third_party/WebKit/*" ]

# Probably need to parameterize this. If we set it to true, there will be some
# further work in the scripts below.
debug_devtools = false

group("devtools_frontend_resources") {
  deps = [
    ":copy_inspector_images",
    ":devtools_html",
    ":toolbox_html",
    ":frontend_protocol_sources",
    ":supported_css_properties",
    ":build_applications",
  ]

  if (!debug_devtools) {
    deps += [
      ":copy_standalone_css",
      ":concatenated_devtools_css",
      ":concatenated_toolbox_css",
    ]
  }
}

copy("copy_inspector_images") {
  sources = gypi_values.devtools_image_files
  outputs = [ "$root_out_dir/resources/inspector/Images/{{source_file_part}}" ]
}

# TODO(GYP) need debug_devtools support (this runs somewhat differently).
action("generate_devtools_grd") {
  script = "scripts/generate_devtools_grd.py"

  input_pages = [
    "$root_out_dir/resources/inspector/devtools.css",
    "$root_out_dir/resources/inspector/devtools.html",
    "$root_out_dir/resources/inspector/devtools.js",
    "$root_out_dir/resources/inspector/toolbox.css",
    "$root_out_dir/resources/inspector/toolbox.html",
    "$root_out_dir/resources/inspector/toolbox.js",
    "$root_out_dir/resources/inspector/audits_module.js",
    "$root_out_dir/resources/inspector/console_module.js",
    "$root_out_dir/resources/inspector/devices_module.js",
    "$root_out_dir/resources/inspector/documentation_module.js",
    "$root_out_dir/resources/inspector/elements_module.js",
    "$root_out_dir/resources/inspector/extensions_module.js",
    "$root_out_dir/resources/inspector/heap_snapshot_worker_module.js",
    "$root_out_dir/resources/inspector/layers_module.js",
    "$root_out_dir/resources/inspector/network_module.js",
    "$root_out_dir/resources/inspector/profiler_module.js",
    "$root_out_dir/resources/inspector/promises_module.js",
    "$root_out_dir/resources/inspector/resources_module.js",
    "$root_out_dir/resources/inspector/script_formatter_worker_module.js",
    "$root_out_dir/resources/inspector/settings_module.js",
    "$root_out_dir/resources/inspector/source_frame_module.js",
    "$root_out_dir/resources/inspector/sources_module.js",
    "$root_out_dir/resources/inspector/temp_storage_shared_worker_module.js",
    "$root_out_dir/resources/inspector/timeline_module.js",
    "$root_out_dir/resources/inspector/devtools_extension_api.js",
  ] + gypi_values.devtools_standalone_files + gypi_values.devtools_cm_css_files

  images = gypi_values.devtools_image_files
  images_path = "front_end/Images"

  inputs = input_pages + images

  outfile = "$root_gen_dir/devtools/devtools_resources.grd"
  outputs = [ outfile ]

  relative_path_dirs = [
    "$root_out_dir/resources/inspector",
    "front_end",
  ]

  args = rebase_path(input_pages, root_build_dir) + [
    "--relative_path_dirs" ] +
    rebase_path(relative_path_dirs, root_build_dir) + [
    "--images", rebase_path(images_path, root_build_dir),
    "--output", rebase_path(outfile, root_build_dir),
  ]

  deps = [
    ":devtools_html",
    ":toolbox_html",
    ":devtools_extension_api",
    ":devtools_frontend_resources",
  ]
}

template("generate_app_html") {
  assert(defined(invoker.app_name), target_name)

  action(target_name) {
    script = "scripts/generate_devtools_html.py"

    inputs = [ "front_end/" + invoker.app_name + ".html"]
    outputs = [
      "$root_out_dir/resources/inspector/" + invoker.app_name + ".html"
    ]

    args = rebase_path(inputs, root_build_dir) +
      rebase_path(outputs, root_build_dir)

    if (debug_devtools) {
      args += [ "1" ]
    } else {
      args += [ "0" ]
    }
  }
}

generate_app_html("devtools_html") {
  app_name = "devtools"
}

generate_app_html("toolbox_html") {
  app_name = "toolbox"
}

action("devtools_extension_api") {
  script = "scripts/generate_devtools_extension_api.py"

  inputs = gypi_values.devtools_extension_api_files
  outputs = [ "$root_out_dir/resources/inspector/devtools_extension_api.js" ]

  args = rebase_path(outputs, root_build_dir) +
    rebase_path(gypi_values.devtools_extension_api_files, root_build_dir)
}

action("supported_css_properties") {
  script = "scripts/generate_supported_css.py"

  inputs = [
    "../core/css/CSSProperties.in",
  ]

  outputs = [
    "$root_out_dir/resources/inspector/SupportedCSSProperties.js"
  ]

  args = rebase_path(inputs, root_build_dir) +
    rebase_path(outputs, root_build_dir)
}

action("frontend_protocol_sources") {
  script = "scripts/CodeGeneratorFrontend.py"

  inputs = [ "protocol.json" ]
  outputs = [ "$root_out_dir/resources/inspector/InspectorBackendCommands.js" ]

  args = rebase_path(inputs, root_build_dir) + [
    "--output_js_dir",
    rebase_path("$root_out_dir/resources/inspector", root_build_dir),
  ]
}

action("build_applications") {
  script = "scripts/build_applications.py"
  helper_scripts = [
      "scripts/modular_build.py",
      "scripts/concatenate_application_code.py",
  ]

  app_descriptor_names = [
      "front_end/devtools.json",
      "front_end/toolbox.json",
  ]

  app_loader_names = [
      "front_end/devtools.js",
      "front_end/toolbox.js",
  ]

  generated_inputs = [
    "$root_out_dir/resources/inspector/Runtime.js",
    "$root_out_dir/resources/inspector/InspectorBackendCommands.js",
    "$root_out_dir/resources/inspector/SupportedCSSProperties.js",
  ]

  inputs =
    helper_scripts + app_descriptor_names + app_loader_names +
    devtools_core_files + gypi_values.devtools_module_json_files +
    generated_inputs

  output_path = "$root_out_dir/resources/inspector/"
  outputs = [
    output_path + "devtools.js",
    output_path + "toolbox.js",
    output_path + "heap_snapshot_worker_module.js",
    output_path + "temp_storage_shared_worker_module.js",
    output_path + "script_formatter_worker_module.js",
  ]

  if (debug_devtools) {
    debug_flag = "1"
  } else {
    debug_flag = "0"
  }

  app_names = [
    "devtools",
    "toolbox"
  ]

  args = app_names + [
    "--input_path", rebase_path("front_end", root_build_dir),
    "--output_path", rebase_path(output_path, root_build_dir),
    "--debug", debug_flag
  ]

  deps = [
    ":build_audits_module",
    ":build_console_module",
    ":build_devices_module",
    ":build_documentation_module",
    ":build_elements_module",
    ":build_extensions_module",
    ":build_layers_module",
    ":build_network_module",
    ":build_profiler_module",
    ":build_promises_module",
    ":build_resources_module",
    ":build_settings_module",
    ":build_source_frame_module",
    ":build_sources_module",
    ":build_timeline_module",
  ]

  if (!debug_devtools) {
    deps += [
      ":devtools_html",
      ":toolbox_html",
      ":supported_css_properties",
      ":frontend_protocol_sources",
      ":concatenated_module_descriptors",
    ]
  }
}

# Runs the concatenate_module_scripts script.
#  module_name: (String) The JS module name to process.
#  imported_files: (List of strings) The list of files the input depends on.
template("concatenate_module_scripts") {
  assert(defined(invoker.module_name), target_name)
  assert(defined(invoker.imported_files), target_name)

  action(target_name) {
    script = "scripts/concatenate_module_scripts.py"
    module_name = invoker.module_name

    input = "front_end/" + module_name + "/module.json"
    inputs = [ input ] + invoker.imported_files

    output = "$root_out_dir/resources/inspector/" + module_name + "_module.js"
    outputs = [ output ]

    args = [
      rebase_path(input, root_build_dir),
      rebase_path(output, root_build_dir),
    ]
  }
}

concatenate_module_scripts("build_audits_module") {
  module_name = "audits"
  imported_files = gypi_values.devtools_audits_js_files
}

concatenate_module_scripts("build_console_module") {
  module_name = "console"
  imported_files = gypi_values.devtools_console_js_files
}

concatenate_module_scripts("build_devices_module") {
  module_name = "devices"
  imported_files = gypi_values.devtools_devices_js_files
}

concatenate_module_scripts("build_documentation_module") {
  module_name = "documentation"
  imported_files = gypi_values.devtools_documentation_js_files
}

concatenate_module_scripts("build_elements_module") {
  module_name = "elements"
  imported_files = gypi_values.devtools_elements_js_files
}

concatenate_module_scripts("build_extensions_module") {
  module_name = "extensions"
  imported_files = devtools_extensions_js_files
}

concatenate_module_scripts("build_layers_module") {
  module_name = "layers"
  imported_files = gypi_values.devtools_layers_js_files
}

concatenate_module_scripts("build_network_module") {
  module_name = "network"
  imported_files = gypi_values.devtools_network_js_files
}

concatenate_module_scripts("build_profiler_module") {
  module_name = "profiler"
  imported_files = gypi_values.devtools_profiler_js_files
}

concatenate_module_scripts("build_promises_module") {
  module_name = "promises"
  imported_files = gypi_values.devtools_promises_js_files
}

concatenate_module_scripts("build_resources_module") {
  module_name = "resources"
  imported_files = gypi_values.devtools_resources_js_files
}

concatenate_module_scripts("build_settings_module") {
  module_name = "settings"
  imported_files = gypi_values.devtools_settings_js_files
}

group("build_source_frame_module") {
  concatenate_module_scripts("concatenate_source_frame_module") {
    module_name = "source_frame"
    imported_files = gypi_values.devtools_source_frame_js_files +
      gypi_values.devtools_cm_js_files
  }

  copy("copy_codemirror_files") {
    sources = gypi_values.devtools_cm_css_files
    outputs = [ "$root_out_dir/resources/inspector/cm/{{source_file_part}}" ]
  }

  deps = [
    ":concatenate_source_frame_module",
    ":copy_codemirror_files",
  ]
}

concatenate_module_scripts("build_sources_module") {
  module_name = "sources"
  imported_files = gypi_values.devtools_sources_js_files
}

concatenate_module_scripts("build_timeline_module") {
  module_name = "timeline"
  imported_files = gypi_values.devtools_timeline_js_files
}

action("concatenated_module_descriptors") {
  script = "scripts/concatenate_module_descriptors.py"

  input = "front_end/Runtime.js"
  inputs = [ input ] + gypi_values.devtools_module_json_files
  outputs = [ "$root_out_dir/resources/inspector/Runtime.js" ]

  args = rebase_path([ input ] + outputs +
    gypi_values.devtools_module_json_files, root_build_dir)
}

template("concatenate_css") {
  assert(defined(invoker.app_name), target_name)

  action(target_name) {
    script = "scripts/concatenate_css_files.py"

    input_stylesheet = "front_end/" + invoker.app_name + ".css"
    inputs = [ input_stylesheet ] + devtools_core_base_files

    outputs = [
      "$root_out_dir/resources/inspector/" + invoker.app_name + ".css"
    ]

    args = [ rebase_path(input_stylesheet, root_build_dir) ] +
      rebase_path(outputs, root_build_dir)
  }
}

copy("copy_standalone_css") {
    sources = gypi_values.devtools_standalone_files
    outputs = [ "$root_out_dir/resources/inspector/{{source_file_part}}" ]
}

concatenate_css("concatenated_devtools_css") {
  app_name = "devtools"
}

concatenate_css("concatenated_toolbox_css") {
  app_name = "toolbox"
}
