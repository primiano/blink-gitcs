{% from "macros.tmpl" import license -%}
{{ license() }}

#ifndef V8{{namespace}}ElementWrapperFactory_h
#define V8{{namespace}}ElementWrapperFactory_h

#include "V8{{namespace}}Element.h"
{%- if fallback_interface %}
#include "V8{{fallback_interface}}.h"
{%- endif %}
#include <v8.h>

namespace WebCore {

class {{namespace}}Element;

WrapperTypeInfo* findWrapperTypeFor{{namespace}}TagName(const AtomicString& name);

v8::Handle<v8::Object> createV8{{namespace}}Wrapper({{namespace}}Element*, v8::Handle<v8::Object> creationContext, v8::Isolate*);
inline v8::Handle<v8::Object> createV8{{namespace}}DirectWrapper({{namespace}}Element* element, v8::Handle<v8::Object> creationContext, v8::Isolate* isolate)
{
    return V8{{namespace}}Element::createWrapper(element, creationContext, isolate);
}
{%- if fallback_interface %}
inline v8::Handle<v8::Object> createV8{{namespace}}FallbackWrapper({{fallback_interface}}* element, v8::Handle<v8::Object> creationContext, v8::Isolate* isolate)
{
    return V8{{fallback_interface}}::createWrapper(element, creationContext, isolate);
}
{%- endif %}

}

#endif
