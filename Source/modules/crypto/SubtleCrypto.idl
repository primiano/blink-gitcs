/*
 * Copyright (C) 2013 Google Inc. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met:
 *
 *     * Redistributions of source code must retain the above copyright
 * notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above
 * copyright notice, this list of conditions and the following disclaimer
 * in the documentation and/or other materials provided with the
 * distribution.
 *     * Neither the name of Google Inc. nor the names of its
 * contributors may be used to endorse or promote products derived from
 * this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

[
    GarbageCollected,
    NoInterfaceObject
] interface SubtleCrypto {
    Promise encrypt(Dictionary algorithm, Key key, ArrayBufferView data);
    Promise encrypt(Dictionary algorithm, Key key, ArrayBuffer data);

    Promise decrypt(Dictionary algorithm, Key key, ArrayBufferView data);
    Promise decrypt(Dictionary algorithm, Key key, ArrayBuffer data);

    Promise sign(Dictionary algorithm, Key key, ArrayBufferView data);
    Promise sign(Dictionary algorithm, Key key, ArrayBuffer data);

    [ImplementedAs=verifySignature] Promise verify(Dictionary algorithm, Key key, ArrayBufferView signature, ArrayBufferView data);
    [ImplementedAs=verifySignature] Promise verify(Dictionary algorithm, Key key, ArrayBufferView signature, ArrayBuffer data);
    [ImplementedAs=verifySignature] Promise verify(Dictionary algorithm, Key key, ArrayBuffer signature, ArrayBuffer data);
    [ImplementedAs=verifySignature] Promise verify(Dictionary algorithm, Key key, ArrayBuffer signature, ArrayBufferView data);

    Promise digest(Dictionary algorithm, ArrayBufferView data);
    Promise digest(Dictionary algorithm, ArrayBuffer data);

    Promise generateKey(Dictionary algorithm, boolean extractable, DOMString[] keyUsages);

    Promise importKey(DOMString format, ArrayBufferView keyData, Dictionary algorithm, boolean extractable, DOMString[] keyUsages);
    Promise importKey(DOMString format, ArrayBuffer keyData, Dictionary algorithm, boolean extractable, DOMString[] keyUsages);

    Promise exportKey(DOMString format, Key key);

    Promise wrapKey(DOMString format, Key key, Key wrappingKey, Dictionary wrapAlgorithm);

    Promise unwrapKey(DOMString format, ArrayBufferView wrappedKey, Key unwrappingKey, Dictionary unwrapAlgorithm, Dictionary unwrappedKeyAlgorithm, boolean extractable, DOMString[] keyUsages);
    Promise unwrapKey(DOMString format, ArrayBuffer wrappedKey, Key unwrappingKey, Dictionary unwrapAlgorithm, Dictionary unwrappedKeyAlgorithm, boolean extractable, DOMString[] keyUsages);
};

