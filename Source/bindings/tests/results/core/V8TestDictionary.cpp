// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file has been auto-generated by code_generator_v8.py. DO NOT MODIFY!

#include "config.h"
#include "V8TestDictionary.h"

#include "bindings/core/v8/ExceptionState.h"
#include "bindings/core/v8/ScriptValue.h"
#include "bindings/core/v8/UnionTypesCore.h"
#include "bindings/core/v8/V8Element.h"
#include "bindings/core/v8/V8TestInterface.h"
#include "bindings/core/v8/V8TestInterfaceGarbageCollected.h"
#include "bindings/core/v8/V8TestInterfaceWillBeGarbageCollected.h"

namespace blink {

void V8TestDictionary::toImpl(v8::Isolate* isolate, v8::Handle<v8::Value> v8Value, TestDictionary& impl, ExceptionState& exceptionState)
{
    if (isUndefinedOrNull(v8Value))
        return;
    if (!v8Value->IsObject()) {
        exceptionState.throwTypeError("cannot convert to dictionary.");
        return;
    }

    v8::Local<v8::Object> v8Object = v8Value->ToObject(isolate);
    v8::TryCatch block;
    v8::Local<v8::Value> booleanMemberValue = v8Object->Get(v8String(isolate, "booleanMember"));
    if (!booleanMemberValue.IsEmpty() && !isUndefinedOrNull(booleanMemberValue)) {
        bool booleanMember = booleanMemberValue->BooleanValue();
        impl.setBooleanMember(booleanMember);
    } else if (block.HasCaught()) {
        exceptionState.rethrowV8Exception(block.Exception());
        return;
    }

    v8::Local<v8::Value> createValue = v8Object->Get(v8String(isolate, "create"));
    if (!createValue.IsEmpty() && !isUndefinedOrNull(createValue)) {
        bool create = createValue->BooleanValue();
        impl.setCreateMember(create);
    } else if (block.HasCaught()) {
        exceptionState.rethrowV8Exception(block.Exception());
        return;
    }

    v8::Local<v8::Value> doubleOrNullMemberValue = v8Object->Get(v8String(isolate, "doubleOrNullMember"));
    if (!doubleOrNullMemberValue.IsEmpty() && !isUndefinedOrNull(doubleOrNullMemberValue)) {
        TONATIVE_VOID_EXCEPTIONSTATE(double, doubleOrNullMember, toDouble(doubleOrNullMemberValue, exceptionState), exceptionState);
        impl.setDoubleOrNullMember(doubleOrNullMember);
    } else if (block.HasCaught()) {
        exceptionState.rethrowV8Exception(block.Exception());
        return;
    }

    v8::Local<v8::Value> doubleOrStringMemberValue = v8Object->Get(v8String(isolate, "doubleOrStringMember"));
    if (!doubleOrStringMemberValue.IsEmpty() && !isUndefinedOrNull(doubleOrStringMemberValue)) {
        DoubleOrString doubleOrStringMember;
        TONATIVE_VOID_EXCEPTIONSTATE_ARGINTERNAL(V8DoubleOrString::toImpl(isolate, doubleOrStringMemberValue, doubleOrStringMember, exceptionState), exceptionState);
        impl.setDoubleOrStringMember(doubleOrStringMember);
    } else if (block.HasCaught()) {
        exceptionState.rethrowV8Exception(block.Exception());
        return;
    }

    v8::Local<v8::Value> elementOrNullMemberValue = v8Object->Get(v8String(isolate, "elementOrNullMember"));
    if (!elementOrNullMemberValue.IsEmpty() && !isUndefinedOrNull(elementOrNullMemberValue)) {
        Element* elementOrNullMember = V8Element::toImplWithTypeCheck(isolate, elementOrNullMemberValue);
        impl.setElementOrNullMember(elementOrNullMember);
    } else if (block.HasCaught()) {
        exceptionState.rethrowV8Exception(block.Exception());
        return;
    }

    v8::Local<v8::Value> enumMemberValue = v8Object->Get(v8String(isolate, "enumMember"));
    if (!enumMemberValue.IsEmpty() && !isUndefinedOrNull(enumMemberValue)) {
        TOSTRING_VOID(V8StringResource<>, enumMember, enumMemberValue);
        String string = enumMember;
        if (!(string == "foo" || string == "bar" || string == "baz")) {
            exceptionState.throwTypeError("member enumMember ('" + string + "') is not a valid enum value.");
            return;
        }
        impl.setEnumMember(enumMember);
    } else if (block.HasCaught()) {
        exceptionState.rethrowV8Exception(block.Exception());
        return;
    }

    v8::Local<v8::Value> longMemberValue = v8Object->Get(v8String(isolate, "longMember"));
    if (!longMemberValue.IsEmpty() && !isUndefinedOrNull(longMemberValue)) {
        TONATIVE_VOID_EXCEPTIONSTATE(int, longMember, toInt32(longMemberValue, exceptionState), exceptionState);
        impl.setLongMember(longMember);
    } else if (block.HasCaught()) {
        exceptionState.rethrowV8Exception(block.Exception());
        return;
    }

    v8::Local<v8::Value> objectMemberValue = v8Object->Get(v8String(isolate, "objectMember"));
    if (!objectMemberValue.IsEmpty() && !isUndefinedOrNull(objectMemberValue)) {
        ScriptValue objectMember = ScriptValue(ScriptState::current(isolate), objectMemberValue);
        if (!objectMember.isObject()) {
            exceptionState.throwTypeError("member objectMember is not an object.");
            return;
        }
        impl.setObjectMember(objectMember);
    } else if (block.HasCaught()) {
        exceptionState.rethrowV8Exception(block.Exception());
        return;
    }

    v8::Local<v8::Value> objectOrNullMemberValue = v8Object->Get(v8String(isolate, "objectOrNullMember"));
    if (!objectOrNullMemberValue.IsEmpty() && !isUndefinedOrNull(objectOrNullMemberValue)) {
        ScriptValue objectOrNullMember = ScriptValue(ScriptState::current(isolate), objectOrNullMemberValue);
        if (!objectOrNullMember.isObject()) {
            exceptionState.throwTypeError("member objectOrNullMember is not an object.");
            return;
        }
        impl.setObjectOrNullMember(objectOrNullMember);
    } else if (block.HasCaught()) {
        exceptionState.rethrowV8Exception(block.Exception());
        return;
    }

    v8::Local<v8::Value> stringArrayMemberValue = v8Object->Get(v8String(isolate, "stringArrayMember"));
    if (!stringArrayMemberValue.IsEmpty() && !isUndefinedOrNull(stringArrayMemberValue)) {
        TONATIVE_VOID_EXCEPTIONSTATE(Vector<String>, stringArrayMember, toImplArray<String>(stringArrayMemberValue, 0, isolate, exceptionState), exceptionState);
        impl.setStringArrayMember(stringArrayMember);
    } else if (block.HasCaught()) {
        exceptionState.rethrowV8Exception(block.Exception());
        return;
    }

    v8::Local<v8::Value> stringMemberValue = v8Object->Get(v8String(isolate, "stringMember"));
    if (!stringMemberValue.IsEmpty() && !isUndefinedOrNull(stringMemberValue)) {
        TOSTRING_VOID(V8StringResource<>, stringMember, stringMemberValue);
        impl.setStringMember(stringMember);
    } else if (block.HasCaught()) {
        exceptionState.rethrowV8Exception(block.Exception());
        return;
    }

    v8::Local<v8::Value> stringOrNullMemberValue = v8Object->Get(v8String(isolate, "stringOrNullMember"));
    if (!stringOrNullMemberValue.IsEmpty() && !isUndefinedOrNull(stringOrNullMemberValue)) {
        TOSTRING_VOID(V8StringResource<>, stringOrNullMember, stringOrNullMemberValue);
        impl.setStringOrNullMember(stringOrNullMember);
    } else if (block.HasCaught()) {
        exceptionState.rethrowV8Exception(block.Exception());
        return;
    }

    v8::Local<v8::Value> stringSequenceMemberValue = v8Object->Get(v8String(isolate, "stringSequenceMember"));
    if (!stringSequenceMemberValue.IsEmpty() && !isUndefinedOrNull(stringSequenceMemberValue)) {
        TONATIVE_VOID_EXCEPTIONSTATE(Vector<String>, stringSequenceMember, toImplArray<String>(stringSequenceMemberValue, 0, isolate, exceptionState), exceptionState);
        impl.setStringSequenceMember(stringSequenceMember);
    } else if (block.HasCaught()) {
        exceptionState.rethrowV8Exception(block.Exception());
        return;
    }

    v8::Local<v8::Value> testInterfaceGarbageCollectedMemberValue = v8Object->Get(v8String(isolate, "testInterfaceGarbageCollectedMember"));
    if (!testInterfaceGarbageCollectedMemberValue.IsEmpty() && !isUndefinedOrNull(testInterfaceGarbageCollectedMemberValue)) {
        TestInterfaceGarbageCollected* testInterfaceGarbageCollectedMember = V8TestInterfaceGarbageCollected::toImplWithTypeCheck(isolate, testInterfaceGarbageCollectedMemberValue);
        impl.setTestInterfaceGarbageCollectedMember(testInterfaceGarbageCollectedMember);
    } else if (block.HasCaught()) {
        exceptionState.rethrowV8Exception(block.Exception());
        return;
    }

    v8::Local<v8::Value> testInterfaceGarbageCollectedOrNullMemberValue = v8Object->Get(v8String(isolate, "testInterfaceGarbageCollectedOrNullMember"));
    if (!testInterfaceGarbageCollectedOrNullMemberValue.IsEmpty() && !isUndefinedOrNull(testInterfaceGarbageCollectedOrNullMemberValue)) {
        TestInterfaceGarbageCollected* testInterfaceGarbageCollectedOrNullMember = V8TestInterfaceGarbageCollected::toImplWithTypeCheck(isolate, testInterfaceGarbageCollectedOrNullMemberValue);
        impl.setTestInterfaceGarbageCollectedOrNullMember(testInterfaceGarbageCollectedOrNullMember);
    } else if (block.HasCaught()) {
        exceptionState.rethrowV8Exception(block.Exception());
        return;
    }

    v8::Local<v8::Value> testInterfaceMemberValue = v8Object->Get(v8String(isolate, "testInterfaceMember"));
    if (!testInterfaceMemberValue.IsEmpty() && !isUndefinedOrNull(testInterfaceMemberValue)) {
        TestInterfaceImplementation* testInterfaceMember = V8TestInterface::toImplWithTypeCheck(isolate, testInterfaceMemberValue);
        impl.setTestInterfaceMember(testInterfaceMember);
    } else if (block.HasCaught()) {
        exceptionState.rethrowV8Exception(block.Exception());
        return;
    }

    v8::Local<v8::Value> testInterfaceOrNullMemberValue = v8Object->Get(v8String(isolate, "testInterfaceOrNullMember"));
    if (!testInterfaceOrNullMemberValue.IsEmpty() && !isUndefinedOrNull(testInterfaceOrNullMemberValue)) {
        TestInterfaceImplementation* testInterfaceOrNullMember = V8TestInterface::toImplWithTypeCheck(isolate, testInterfaceOrNullMemberValue);
        impl.setTestInterfaceOrNullMember(testInterfaceOrNullMember);
    } else if (block.HasCaught()) {
        exceptionState.rethrowV8Exception(block.Exception());
        return;
    }

    v8::Local<v8::Value> testInterfaceWillBeGarbageCollectedMemberValue = v8Object->Get(v8String(isolate, "testInterfaceWillBeGarbageCollectedMember"));
    if (!testInterfaceWillBeGarbageCollectedMemberValue.IsEmpty() && !isUndefinedOrNull(testInterfaceWillBeGarbageCollectedMemberValue)) {
        TestInterfaceWillBeGarbageCollected* testInterfaceWillBeGarbageCollectedMember = V8TestInterfaceWillBeGarbageCollected::toImplWithTypeCheck(isolate, testInterfaceWillBeGarbageCollectedMemberValue);
        impl.setTestInterfaceWillBeGarbageCollectedMember(testInterfaceWillBeGarbageCollectedMember);
    } else if (block.HasCaught()) {
        exceptionState.rethrowV8Exception(block.Exception());
        return;
    }

    v8::Local<v8::Value> testInterfaceWillBeGarbageCollectedOrNullMemberValue = v8Object->Get(v8String(isolate, "testInterfaceWillBeGarbageCollectedOrNullMember"));
    if (!testInterfaceWillBeGarbageCollectedOrNullMemberValue.IsEmpty() && !isUndefinedOrNull(testInterfaceWillBeGarbageCollectedOrNullMemberValue)) {
        TestInterfaceWillBeGarbageCollected* testInterfaceWillBeGarbageCollectedOrNullMember = V8TestInterfaceWillBeGarbageCollected::toImplWithTypeCheck(isolate, testInterfaceWillBeGarbageCollectedOrNullMemberValue);
        impl.setTestInterfaceWillBeGarbageCollectedOrNullMember(testInterfaceWillBeGarbageCollectedOrNullMember);
    } else if (block.HasCaught()) {
        exceptionState.rethrowV8Exception(block.Exception());
        return;
    }

}

v8::Handle<v8::Value> toV8(TestDictionary& impl, v8::Handle<v8::Object> creationContext, v8::Isolate* isolate)
{
    v8::Handle<v8::Object> v8Object = v8::Object::New(isolate);
    toV8TestDictionary(impl, v8Object, creationContext, isolate);
    return v8Object;
}

void toV8TestDictionary(TestDictionary& impl, v8::Handle<v8::Object> dictionary, v8::Handle<v8::Object> creationContext, v8::Isolate* isolate)
{
    if (impl.hasBooleanMember()) {
        dictionary->Set(v8String(isolate, "booleanMember"), v8Boolean(impl.booleanMember(), isolate));
    }

    if (impl.hasCreateMember()) {
        dictionary->Set(v8String(isolate, "create"), v8Boolean(impl.createMember(), isolate));
    }

    if (impl.hasDoubleOrNullMember()) {
        dictionary->Set(v8String(isolate, "doubleOrNullMember"), v8::Number::New(isolate, impl.doubleOrNullMember()));
    } else {
        dictionary->Set(v8String(isolate, "doubleOrNullMember"), v8::Null(isolate));
    }

    if (impl.hasDoubleOrStringMember()) {
        dictionary->Set(v8String(isolate, "doubleOrStringMember"), toV8(impl.doubleOrStringMember(), creationContext, isolate));
    }

    if (impl.hasElementOrNullMember()) {
        dictionary->Set(v8String(isolate, "elementOrNullMember"), toV8(impl.elementOrNullMember(), creationContext, isolate));
    }

    if (impl.hasEnumMember()) {
        dictionary->Set(v8String(isolate, "enumMember"), v8String(isolate, impl.enumMember()));
    } else {
        dictionary->Set(v8String(isolate, "enumMember"), v8String(isolate, String("foo")));
    }

    if (impl.hasLongMember()) {
        dictionary->Set(v8String(isolate, "longMember"), v8::Integer::New(isolate, impl.longMember()));
    } else {
        dictionary->Set(v8String(isolate, "longMember"), v8::Integer::New(isolate, 1));
    }

    if (impl.hasObjectMember()) {
        ASSERT(impl.objectMember().isObject());
        dictionary->Set(v8String(isolate, "objectMember"), impl.objectMember().v8Value());
    }

    if (impl.hasObjectOrNullMember()) {
        ASSERT(impl.objectOrNullMember().isObject());
        dictionary->Set(v8String(isolate, "objectOrNullMember"), impl.objectOrNullMember().v8Value());
    }

    if (impl.hasStringArrayMember()) {
        dictionary->Set(v8String(isolate, "stringArrayMember"), v8Array(impl.stringArrayMember(), creationContext, isolate));
    }

    if (impl.hasStringMember()) {
        dictionary->Set(v8String(isolate, "stringMember"), v8String(isolate, impl.stringMember()));
    }

    if (impl.hasStringOrNullMember()) {
        dictionary->Set(v8String(isolate, "stringOrNullMember"), v8String(isolate, impl.stringOrNullMember()));
    } else {
        dictionary->Set(v8String(isolate, "stringOrNullMember"), v8String(isolate, String("default string value")));
    }

    if (impl.hasStringSequenceMember()) {
        dictionary->Set(v8String(isolate, "stringSequenceMember"), v8Array(impl.stringSequenceMember(), creationContext, isolate));
    }

    if (impl.hasTestInterfaceGarbageCollectedMember()) {
        dictionary->Set(v8String(isolate, "testInterfaceGarbageCollectedMember"), toV8(impl.testInterfaceGarbageCollectedMember(), creationContext, isolate));
    }

    if (impl.hasTestInterfaceGarbageCollectedOrNullMember()) {
        dictionary->Set(v8String(isolate, "testInterfaceGarbageCollectedOrNullMember"), toV8(impl.testInterfaceGarbageCollectedOrNullMember(), creationContext, isolate));
    }

    if (impl.hasTestInterfaceMember()) {
        dictionary->Set(v8String(isolate, "testInterfaceMember"), toV8(impl.testInterfaceMember(), creationContext, isolate));
    }

    if (impl.hasTestInterfaceOrNullMember()) {
        dictionary->Set(v8String(isolate, "testInterfaceOrNullMember"), toV8(impl.testInterfaceOrNullMember(), creationContext, isolate));
    }

    if (impl.hasTestInterfaceWillBeGarbageCollectedMember()) {
        dictionary->Set(v8String(isolate, "testInterfaceWillBeGarbageCollectedMember"), toV8(impl.testInterfaceWillBeGarbageCollectedMember(), creationContext, isolate));
    }

    if (impl.hasTestInterfaceWillBeGarbageCollectedOrNullMember()) {
        dictionary->Set(v8String(isolate, "testInterfaceWillBeGarbageCollectedOrNullMember"), toV8(impl.testInterfaceWillBeGarbageCollectedOrNullMember(), creationContext, isolate));
    }

}

} // namespace blink
