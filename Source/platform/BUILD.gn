# Copyright 2014 The Chromium Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import("../build/scripts/scripts.gni")

platform_gypi = exec_script(
    "//build/gypi_to_gn.py",
    [ rebase_path("blink_platform.gypi") ],
    "scope",
    [ "blink_platform.gypi" ])

component("blink_common") {
  sources = [
    "exported/WebCString.cpp",
    "exported/WebString.cpp",
    "exported/WebCommon.cpp",
  ]

  defines = [
    "BLINK_COMMON_IMPLEMENTATION=1",
    "INSIDE_BLINK",
  ]

  configs += [
    "//build/config/compiler:wexit_time_destructors",
    "//third_party/WebKit/Source:config",
  ]

  deps = [
    "//third_party/WebKit/Source/wtf",
  ]
}

# Chromium's version of WebCore includes the following Objective-C classes. The
# system-provided WebCore framework may also provide these classes. Because of
# the nature of Objective-C binding (dynamically at runtime), it's possible for
# the Chromium-provided versions to interfere with the system-provided
# versions. This may happen when a system framework attempts to use
# core.framework, such as when converting an HTML-flavored string to an
# NSAttributedString. The solution is to force Objective-C class names that
# would conflict to use alternate names.
#
# This list will hopefully shrink but may also grow. Its performance is
# monitored by the "Check Objective-C Rename" postbuild step, and any
# suspicious-looking symbols not handled here or whitelisted in that step will
# cause a build failure.
#
# If this is unhandled, the console will receive log messages
# such as:
# com.google.Chrome[] objc[]: Class ScrollbarPrefsObserver is implemented in both .../Google Chrome.app/Contents/Versions/.../Google Chrome Helper.app/Contents/MacOS/../../../Google Chrome Framework.framework/Google Chrome Framework and /System/Library/Frameworks/WebKit.framework/Versions/A/Frameworks/WebCore.framework/Versions/A/WebCore. One of the two will be used. Which one is undefined.
if (is_mac) {
  config("mac_objc_renaming") {
    defines = [
      "WebCascadeList=ChromiumWebCoreObjCWebCascadeList",
      "WebFontCache=ChromiumWebCoreObjCWebFontCache",
      "WebScrollAnimationHelperDelegate=ChromiumWebCoreObjCWebScrollAnimationHelperDelegate",
      "WebScrollbarPainterControllerDelegate=ChromiumWebCoreObjCWebScrollbarPainterControllerDelegate",
      "WebScrollbarPainterDelegate=ChromiumWebCoreObjCWebScrollbarPainterDelegate",
      "WebScrollbarPartAnimation=ChromiumWebCoreObjCWebScrollbarPartAnimation",
      "WebCoreFlippedView=ChromiumWebCoreObjCWebCoreFlippedView",
      "WebCoreTextFieldCell=ChromiumWebCoreObjCWebCoreTextFieldCell",
      "WebCoreRenderThemeNotificationObserver=ChromiumWebCoreObjCWebCoreRenderThemeNotificationObserver",
    ]
  }
}

action("font_family_names") {
  script = "../build/scripts/make_names.py"

  font_family_names_in = "fonts/FontFamilyNames.in"
  source_prereqs = make_names_files + [ font_family_names_in ]

  output_path = "$root_gen_dir/blink"
  outputs = [
    "$output_path/FontFamilyNames.cpp",
    "$output_path/FontFamilyNames.h",
  ]

  args = [
    rebase_path(font_family_names_in, root_build_dir),
    "--output_dir",
    rebase_path(output_path, root_build_dir),
  ]
}

action("runtime_enabled_features") {
  script = "../build/scripts/make_runtime_features.py"

  runtime_enabled_features_in = "RuntimeEnabledFeatures.in"
  source_prereqs = scripts_for_in_files + [
    runtime_enabled_features_in,
    "../build/scripts/templates/RuntimeEnabledFeatures.cpp.tmpl",
    "../build/scripts/templates/RuntimeEnabledFeatures.h.tmpl",
  ]

  output_path = "$root_gen_dir/blink"
  outputs = [
    "$output_path/RuntimeEnabledFeatures.cpp",
    "$output_path/blink/RuntimeEnabledFeatures.h",
  ]

  args = [
    rebase_path(runtime_enabled_features_in, root_build_dir),
    "--output_dir",
    rebase_path(output_path, root_build_dir),
  ]
}

action("color_data") {
  script = "../build/scripts/gperf.py"

  color_data_gperf = "ColorData.gperf"
  source_prereqs = [ color_data_gperf ]

  output_file = "$root_gen_dir/blink/ColorData.cpp"
  outputs = [ output_file ]

  args = [
    gperf_exe,
    "--key-positions=*",
    "-D", "-s", "2",
    rebase_path(color_data_gperf, root_build_dir),
    "--output-file=" + rebase_path(output_file, root_build_dir),
  ]
}

# TODO(brettw) Work in progress, finish this when more dependencies are
# complete.
#
# TODO(brettw) Objective C Renaming postbuild steps on Mac.
component("platform") {
  output_name = "blink_platform"

  # TODO(brettw) enable this when the sources compile (they currently depend on
  # some of the unconverted targets).
  #sources = platform_gypi.platform_files
  sources = []

  # Add in the generated files.
  sources +=
    get_target_outputs(":font_family_names") +
    get_target_outputs(":runtime_enabled_features") +
    get_target_outputs(":color_data")


  configs += [
    "//third_party/WebKit/Source:config",
  ]

  defines = [
    "BLINK_PLATFORM_IMPLEMENTATION=1",
    "INSIDE_BLINK",
  ]

  include_dirs = [
    #"$angle_path/include",
    "$root_gen_dir/blink",
  ]

  deps = [
    ":blink_common",
    ":color_data",
    ":font_family_names",
    ":runtime_enabled_features",
    "//skia",
    "//third_party:jpeg",
    "//third_party/iccjpeg",
    "//third_party/icu",
    "//third_party/libpng",
    "//third_party/libwebp",
    "//third_party/ots",
    "//third_party/qcms",
    "//third_party/WebKit/Source/wtf",
    "//third_party/WebKit/Source/platform/heap",
    "//url",
    #'blink_heap_asm_stubs',
    #'<(DEPTH)/gpu/gpu.gyp:gles2_c_lib',
    #'<(DEPTH)/v8/tools/gyp/v8.gyp:v8',
  ]

  forward_dependent_configs_from = [
    "//skia",
    "//third_party:jpeg",
    "//third_party/iccjpeg",
    "//third_party/libpng",
    "//third_party/libwebp",
    "//third_party/ots",
    "//third_party/qcms",
    "//url",
    #'<(DEPTH)/gpu/gpu.gyp:gles2_c_lib',
    #'<(DEPTH)/v8/tools/gyp/v8.gyp:v8',
  ]

  if (is_mac) {
    # Some Mac-specific parts of WebKit won't compile without having this
    # prefix header injected.
    cflags = [
      "-include",
      rebase_path("../core/WebCorePrefixMac.h", root_build_dir),
    ]

    configs += [ ":mac_objc_renaming" ]
  } else if (is_win) {
    cflags = [
      "/wd4267",  # Conversion from 'size_t' to 'type', possible loss of data.
      "/wd4334",  # Result of 32-bit shift implicitly converted to 64 bits.
      "/wd4724",  # Modulo by 0.
    ]
  }
}

